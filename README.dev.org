#+TODO: TODO IN-PROGRESS | DONE WONT-DO
* Build and test environments
** Packages to install

*** Any Operating System
clang-tidy

*** Debian
# For building deb packages
devscripts (includes 'debuild' script)

*** Linux in general

# For clangd's compile_commands.json ("bear -- ./configure" + "bear -- make")
bear

* Lessons learned

1. Test a cwdaewmon process that is running as system service

cwdaemon is installed on target OS and is executed as system daemon. This
means that it may behave differently than when started by hand from build
directory.

One example of a different behaviour is accessing PulseAudio: cwdaemon
started by hand by developer has no problems with opening PulseAudio sink,
but when started as system service by systemd, it can't open PulseAudio sink.

* Terminology and conventions for code and documentation

You SHOULD use "command line",
You MUST NOT use "commandline".
You MAY use "command-line".

You SHOULD start debug messages with capital letters. Example ("Invalid" is the first word in the message):
    "[ERROR] cwdaemon: Invalid value of option for keying device (expected 'key|ptt=RTS|DTR|none'): [ke=none]"


- Use "option" when referring to command line tokens passed to cwdaemon
  program that are used to configure and control the behaviour of the daemon.

  Don't use "command". Don't use "switch". "Don't use arg".

  "command" can be used in "command line option" phrase, but only as part of
  "command line".

  "--help" token is an option (a command line option).
  "-p 4242" is an option with value "4242".

  "./src/cwdaemon -n" starts a program with "-n" command line option.

  Rationale: "man 1/3 getopt" talks about parsing of "options".

- Use "reply" or "socket reply" when referring to data sent back by cwdaemon
  server to clients over socket network.

  The reply is sent back in response to either <ESC>h request or to caret
  request.

- Use "full reply" or "full socket reply" when referring to a reply that:
    - includes leading 'h' character and trailing "\r\n" bytes and is sent in
      response to <ESC>H request
    - includes trailing "\r\n" bytes and is sent in response to caret request.

- Use "code" or "Escape code" when describing a character that follows ESC
  character in Escape requests. This is the second character in the escape
  requests.

* Bugs, features
** TODO [#C] R0001: Bug: PulseAudio for system services

Summary:
cwdaemon started by systemd can't open PulseAudio sound sink.

Reproduction steps:
 1. Build and install libcw 7.0,
 2. Build and install cwdaemon 0.11.0 or 0.12.0
 3. Modify operating systems's init scripts to start the cwdaemon
 4. Modify /etc/default/cwdaemon to use PulseAudio
 4. systemctl start cwdaemon

If you set sound system in cwdaemon's config to "p" (PulseAudio) then
cwdaemon/libcw will have problems opening the sound sink.

You can also see this when you start "cwdaemon -n -x p" by hand as root.

This is probably a bug in libcw, but I'm putting it here because it was found
during work on cwdaemon and I didn't investigate it in libcw yet.

** TODO [#C] R0002: Bug: Makefiles in deb/usr/share/cwdaemon
The dir in deb package contains Makefile.am and Makefile.in, which are pretty
useless for end-user. It would be better to have just a simple Makefile in
that location.

** TODO [#C] R0003: Feature: Add printing of specific envs

Print XDG_RUNTIME_DIR, LD_LIBRARY_PATH and perhaps something else, but only
if you enable it explicitly in code (#ifdef 0 by default).

This feature may help in debugging different problems.

I had to modify test code (extend env table of process) in order to avoid
problems with PulseAudio.

** DONE R0004: Feature: Pin assignments
Look at possibility to re-define pin assignments.
Search for "cwdaemon suggestion" e-mail from Herman Tibor HA4TI
https://forums.qrz.com/index.php?threads/cw-keyer-with-no-dtr-pin-cwdaemon-cwlib.744068/#post-5732680

Done for tty devices through -o/--option command line option.

** DONE R0005: Bug: usleep() is obsolete
Per man page on linux the function is removed in newer POSIX. Replace it with nanosleep().

Today (2024.01.06) the C code doesn't use usleep() anymore.
Sleep is done using nanosleep() - see src/sleep.c.

** TODO [#C] R0006: Bug: duplicated error message for invalid PTT delay

During execution of cwtest_escd.pl test, when invalid values are sent in
escaped request, cwdaemon prints error log twice:

[ERROR] cwdaemon: invalid requested PTT delay [ms]: "0.096100" (should be integer between 0 and 50 inclusive)
[ERROR] cwdaemon: invalid requested PTT delay [ms]: "0.096100" (should be integer between 0 and 50 inclusive)

** TODO [#C] R0007: Bug: cwdaemon_params_pttdelay() returns magic values

cwdaemon_params_pttdelay() can return 0/1/2. Replace the integer values with
enums.

** TODO [#B] R0008: Feature: better set of values for 'invalid' functional tests

Some functional tests implemented in Perl are sending float values as invalid
values of escaped requests. Currently the values look like this:

    Trying to set positive float value 0.010000
    Trying to set positive float value 0.031000
    Trying to set positive float value 0.096100
    Trying to set positive float value 0.297910
    Trying to set positive float value 0.923521
    Trying to set positive float value 2.862915
    Trying to set positive float value 8.875037
    Trying to set positive float value 27.512614
    Trying to set positive float value 85.289104
    Trying to set positive float value 264.396222
    Trying to set positive float value 819.628287
    Trying to set positive float value 2540.847690
    Trying to set positive float value 7876.627838

Testing cwdaemon with both 0.031000 and 0.096100, or with 264.396222 and
819.628287 doesn't bring much value. The set of values should be
re-evaluated.

** TODO [#C] R0009: Feature: duration of functional tests

Execution time of each functional test (and in future of non-functional test)
should be:

1. Measured during execution of a test binary (e.g. by subtracting uptime at
   end from uptime at start); the value should be displayed at the end of test.
2. The value should be also recorded in qa/tests.org, so that it's possible
   to estimate duration of functional tests in total.
3. The value should be then also displayed at the beginning of each
   functional test, to give tester some expectation for duration of test.

** TODO [#B] R0010: Feature: clear indication of results of tests

Each test case in each type of test (functional, non-functional, unit test)
should clearly and explicitly indicate PASS or FAIL result in output printed
to console.

Tester should always be unambiguously informed about PASS/FAIL result. He
should not be forced to read sentences in logs, he should be able to evaluate
tests' results just by looking at PASS/FAIL indicator in output of logs.

** IN-PROGRESS [#C] R0011: Feature: unify handling of short and long command line options

Handling of the short and long options is duplicated between
cwdaemon_args_process_short() and cwdaemon_args_process_long().

The unification has already started for "-o"/"--options" command line option:
you can see in cwdaemon_args_long[] that the fourth field of 'struct option'
is set to 'o', and that the option is handled by call to
cwdaemon_params_options() only in cwdaemon_args_process_short().

Do this slowly, one option at a time. The processing of command-line options
functions correctly so don't try to adjust everything at once and
accidentally break something.

** IN-PROGRESS [#A] R0012: Static code analysis with clang-tidy

Add/improve tools and procedures for static code analysis with clang-tidy.

** TODO [#A] R0013: Static code analysis with cppcheck

Add/improve tools and procedures for static code analysis with cppcheck.

** TODO [#A] R0014: Static code analysis with gcc fanalyse

Add/improve tools and procedures for static code analysis with gcc fanalyse.

** TODO [#C] R0015: Improve approach to logging

Code from src/log.c should be refactored to provide the following features:

 - there should be single function or an unified and consistent set of
   functions used for logging information. Currently three are three
   functions:

    - log_message()
    - cwdaemon_errmsg()
    - cwdaemon_debug()

 - it should be possible to disable logging at compile time in a way that
   removes log message strings from cwdaemon binary. The purpose of this is
   to have an option to reduce size of cwdaemon binary.

 - verbosity/severity of log messages doesn't use custom VERBOSITY enums, but
   relies on LOG_ERR and friends.

** TODO [#A] R0016: Unit tests for cwdaemon_recvfrom()

Write proper unit tests of cwdaemon_recvfrom(), including mocking of libc's
recvfrom().

** TODO [#B] R0017: Continue writing unit tests for cwdaemon code

Find next functions (existing or to-be-written) in cwdaemon that should be
unit-tested.

Ticket R0016 is for specific function that needs special attention. Ticket
R0017 is for unit testing in general.

** TODO [#B] R0018: Review cooperation of cwdevice::init() and cwdevice::free()

Review a "TODO acerion 2024.03.17" comment added to ttys_init(). Evaluate how
cwdevice::init() and cwdevice::free() should be called in
cwdaemon_cwdevice_set() to properly de-init old device and to init new
device.

Use the following code to trigger a valgrind error shown below:

#!/bin/bash

valid="ttyUSB0"
invalid="hello"

declare -a commands=("\x1b8/dev/"$valid
					 "\x1b8/dev/"$invalid
					 "\x1b8/dev/"$valid
					 "\x1b8/dev/"$valid
					 "\x1b8/dev/"$valid
					 "\x1b8/dev/"$invalid
					 "\x1b8/dev/"$valid
					 "\x1b8/dev/"$invalid
					 "\x1b5"
					)

sleep 2

for i in "${commands[@]}"
do
	echo -ne $i | nc -u -q 0 127.0.0.1 6789
	sleep 1
done



==13591== HEAP SUMMARY:
==13591==     in use at exit: 8 bytes in 1 blocks
==13591==   total heap usage: 23 allocs, 22 frees, 147,158 bytes allocated
==13591==
==13591== 8 bytes in 1 blocks are still reachable in loss record 1 of 1
==13591==    at 0x48455EF: calloc (vg_replace_malloc.c:1328)
==13591==    by 0x10DDC7: ttys_init (ttys.c:137)
==13591==    by 0x10C382: cwdaemon_cwdevice_set (cwdaemon.c:2549)
==13591==    by 0x10C7DC: cwdaemon_params_cwdevice (cwdaemon.c:1768)
==13591==    by 0x10C7DC: cwdaemon_handle_escaped_request (cwdaemon.c:1070)
==13591==    by 0x10CF77: cwdaemon_receive (cwdaemon.c:946)
==13591==    by 0x10AD94: main (cwdaemon.c:2374)


